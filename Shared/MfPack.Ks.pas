// FactoryX
//
// Copyright: © FactoryX. All rights reserved.
//
// Project: MfPack - Shared
// Project location: http://sourceforge.net/projects/MFPack
// Module: MfPack.Ks.pas
// Kind: Pascal / Delphi unit
// Release date: 02-06-2016
// Language: ENU
//
// Revision Version: 2.6.4
// Description: Windows Driver Model/Connection and Streaming Architecture (WDM-CSA)
// ions.
//
// Organisation: FactoryX
// Initiator(s): Tony (maXcomX), Peter (OzShips)
// Contributor(s): Tony Kalf (maXcomX),
//
//------------------------------------------------------------------------------
// CHANGE LOG
// Date       Person              Reason
// ---------- ------------------- ----------------------------------------------
// 28/05/2020                     Kraftwerk release. (WIN10 April 2020 update, version 20H1)
//------------------------------------------------------------------------------
//
// Remarks: Requires Windows 8.1 or later.
// 
// Related objects: -
// Related projects: MfPackX264
// Known Issues: -
//
// Compiler version: 23 up to 33
// SDK version: 10.0.19569.0
//
// Todo: -
//
//==============================================================================
// Source: ks.h
//
// Copyright (c) Microsoft Corporation. All rights reserved.
//==============================================================================
//
// LICENSE
// 
// The contents of this file are subject to the Mozilla Public License
// Version 1.1 (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/MPL-1.1.html
// 
// Software distributed under the License is distributed on an "AS IS"
// basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
// License for the specific language governing rights and limitations
// under the License.
// 
// Users may distribute this source code provided that this header is included
// in full at the top of the file.
//==============================================================================
unit MfPack.Ks;

  {$HPPEMIT ''}
  {$HPPEMIT '#include "ks.h"'}
  {$HPPEMIT ''}

interface

uses

  {WinApi}
  WinApi.Windows,
  {MfPack}
  MfPack.MfpTypes;

  {$WEAKPACKAGEUNIT ON}
  {$MINENUMSIZE 4}

  {$IFDEF WIN32}
    {$ALIGN 1}
  {$ELSE}
    {$ALIGN 8} // Win64
  {$ENDIF}

  {$I 'MfPack.inc'}

const

  _KS_NO_ANONYMOUS_STRUCTURES_        = 1;
  {$EXTERNALSYM _KS_NO_ANONYMOUS_STRUCTURES_}


//==============================================================================
  IOCTL_KS_PROPERTY      = DWORD(3080195);
  {$EXTERNALSYM IOCTL_KS_PROPERTY}
  IOCTL_KS_ENABLE_EVENT  = DWORD(3080199);
  {$EXTERNALSYM IOCTL_KS_ENABLE_EVENT}
  IOCTL_KS_DISABLE_EVENT = DWORD(3080203);
  {$EXTERNALSYM IOCTL_KS_DISABLE_EVENT}
  IOCTL_KS_METHOD        = DWORD(3080207);
  {$EXTERNALSYM IOCTL_KS_METHOD}
  IOCTL_KS_WRITE_STREAM  = DWORD(3112979);
  {$EXTERNALSYM IOCTL_KS_WRITE_STREAM}
  IOCTL_KS_READ_STREAM   = DWORD(3096599);
  {$EXTERNALSYM IOCTL_KS_READ_STREAM}
  IOCTL_KS_RESET_STATE   = DWORD(3080219);
  {$EXTERNALSYM IOCTL_KS_RESET_STATE}
//==============================================================================

type

  PKSRESET = ^KSRESET;
  KSRESET = (
    KSRESET_BEGIN = 0,
    KSRESET_END = 1
  );
  {$EXTERNALSYM KSRESET}

  PKSSTATE = ^KSSTATE;
  KSSTATE = (
    KSSTATE_STOP = 0,
    KSSTATE_ACQUIRE = 1,
    KSSTATE_PAUSE = 2,
    KSSTATE_RUN = 3
  );
  {$EXTERNALSYM KSSTATE}

const

  KSPRIORITY_LOW       = $00000001;
  {$EXTERNALSYM KSPRIORITY_LOW}
  KSPRIORITY_NORMAL    = $40000000;
  {$EXTERNALSYM KSPRIORITY_NORMAL}
  KSPRIORITY_HIGH      = $80000000;
  {$EXTERNALSYM KSPRIORITY_HIGH}
  KSPRIORITY_EXCLUSIVE = MAXDWORD;
  {$EXTERNALSYM KSPRIORITY_EXCLUSIVE}

type

  PKSPRIORITY = ^KSPRIORITY;
  KSPRIORITY = record
    PriorityClass: ULONG;
    PrioritySubClass: ULONG;
  end;
  {$EXTERNALSYM KSPRIORITY}


  PKSIDENTIFIER = ^KSIDENTIFIER;
  KSIDENTIFIER = record
    case integer of
      0: (Set_  : TGUID;
          Id    : ULONG;
          Flags : ULONG);
      1: (Alignment : LONGLONG);
  end;
  {$EXTERNALSYM KSIDENTIFIER}

  PKSPROPERTY = ^KSPROPERTY;
  KSPROPERTY  = {$IFDEF TYPE_IDENTITY} type {$ENDIF} KSIDENTIFIER;
  {$EXTERNALSYM KSPROPERTY}
  PKSMETHOD   = ^KSMETHOD;
  KSMETHOD    = KSPROPERTY;
  {$EXTERNALSYM KSMETHOD}
  PKSEVENT    = ^KSEVENT;
  KSEVENT     = KSIDENTIFIER;
  {$EXTERNALSYM KSEVENT}


const

  KSMETHOD_TYPE_NONE             = $00000000;
  {$EXTERNALSYM KSMETHOD_TYPE_NONE}
  KSMETHOD_TYPE_READ             = $00000001;
  {$EXTERNALSYM KSMETHOD_TYPE_READ}
  KSMETHOD_TYPE_WRITE            = $00000002;
  {$EXTERNALSYM KSMETHOD_TYPE_WRITE}
  KSMETHOD_TYPE_MODIFY           = $00000003;
  {$EXTERNALSYM KSMETHOD_TYPE_MODIFY}
  KSMETHOD_TYPE_SOURCE           = $00000004;
  {$EXTERNALSYM KSMETHOD_TYPE_SOURCE}

  KSMETHOD_TYPE_SEND             = $00000001;
  {$EXTERNALSYM KSMETHOD_TYPE_SEND}
  KSMETHOD_TYPE_SETSUPPORT       = $00000100;
  {$EXTERNALSYM KSMETHOD_TYPE_SETSUPPORT}
  KSMETHOD_TYPE_BASICSUPPORT     = $00000200;
  {$EXTERNALSYM KSMETHOD_TYPE_BASICSUPPORT}

  KSMETHOD_TYPE_TOPOLOGY         = $10000000;
  {$EXTERNALSYM KSMETHOD_TYPE_TOPOLOGY}

  KSPROPERTY_TYPE_GET            = $00000001;
  {$EXTERNALSYM KSPROPERTY_TYPE_GET}
  KSPROPERTY_TYPE_GETPAYLOADSIZE = $00000004;
  {$EXTERNALSYM KSPROPERTY_TYPE_GETPAYLOADSIZE}
  KSPROPERTY_TYPE_SET            = $00000002;
  {$EXTERNALSYM KSPROPERTY_TYPE_SET}

  KSPROPERTY_TYPE_SETSUPPORT     = $00000100;
  {$EXTERNALSYM KSPROPERTY_TYPE_SETSUPPORT}
  KSPROPERTY_TYPE_BASICSUPPORT   = $00000200;
  {$EXTERNALSYM KSPROPERTY_TYPE_BASICSUPPORT}
  KSPROPERTY_TYPE_RELATIONS      = $00000400;
  {$EXTERNALSYM KSPROPERTY_TYPE_RELATIONS}
  KSPROPERTY_TYPE_SERIALIZESET   = $00000800;
  {$EXTERNALSYM KSPROPERTY_TYPE_SERIALIZESET}
  KSPROPERTY_TYPE_UNSERIALIZESET = $00001000;
  {$EXTERNALSYM KSPROPERTY_TYPE_UNSERIALIZESET}
  KSPROPERTY_TYPE_SERIALIZERAW   = $00002000;
  {$EXTERNALSYM KSPROPERTY_TYPE_SERIALIZERAW}
  KSPROPERTY_TYPE_UNSERIALIZERAW = $00004000;
  {$EXTERNALSYM KSPROPERTY_TYPE_UNSERIALIZERAW}
  KSPROPERTY_TYPE_SERIALIZESIZE  = $00008000;
  {$EXTERNALSYM KSPROPERTY_TYPE_SERIALIZESIZE}
  KSPROPERTY_TYPE_DEFAULTVALUES  = $00010000;
  {$EXTERNALSYM KSPROPERTY_TYPE_DEFAULTVALUES}

  KSPROPERTY_TYPE_TOPOLOGY       = $10000000;
  {$EXTERNALSYM KSPROPERTY_TYPE_TOPOLOGY}
  KSPROPERTY_TYPE_HIGHPRIORITY   = $08000000;
  {$EXTERNALSYM KSPROPERTY_TYPE_HIGHPRIORITY}
  KSPROPERTY_TYPE_FSFILTERSCOPE  = $40000000;
  {$EXTERNALSYM KSPROPERTY_TYPE_FSFILTERSCOPE}
  KSPROPERTY_TYPE_COPYPAYLOAD    = $80000000;
  {$EXTERNALSYM KSPROPERTY_TYPE_COPYPAYLOAD}

type

  PKSP_NODE = ^KSP_NODE;
  KSP_NODE = record
    Property_ : KSPROPERTY;
    NodeId    : ULONG;
    Reserved  : ULONG;
  end;
  {$EXTERNALSYM KSP_NODE}

  PKSM_NODE = ^KSM_NODE;
  KSM_NODE = record
    Method   : KSMETHOD;
    NodeId   : ULONG;
    Reserved : ULONG;
  end;
  {$EXTERNALSYM KSM_NODE}

  PKSE_NODE = ^KSE_NODE;
  KSE_NODE = record
    Event    : KSEVENT;
    NodeId   : ULONG;
    Reserved : ULONG;
  end;
  {$EXTERNALSYM KSE_NODE}

const

  KSPROPTYPESETID_General    : TGUID = '{97E99BA0-BDEA-11CF-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSPROPTYPESETID_General}

type

 VARENUM = (
    VT_EMPTY = 0,                // The type of the contained field is undefined. When this flag is specified, the PROPVARIANT MUST NOT contain a data field.
    VT_NULL = 1,                 // Nil.
    VT_I2 = 2,                   // A 2-byte integer.
    VT_I4 = 3,                   // A 4-byte integer.
    VT_R4 = 4,                   // A 4-byte real.
    VT_R8 = 5,                   // An 8-byte real.
    VT_CY = 6,                   // Currency.
    VT_DATE = 7,                 // A date.
    VT_BSTR = 8,                 // A string.
    VT_DISPATCH = 9,             // An IDispatch pointer.
    VT_ERROR = 10,               // An SCODE value.
    VT_BOOL = 11,                // A Boolean value. True is -1 and false is 0.
    VT_VARIANT = 12,             // A variant pointer.
    VT_UNKNOWN = 13,             // An IUnknown pointer.
    VT_DECIMAL = 14,             // A 16-byte fixed-pointer value.
    VT_I1 = 16,                  // A character.
    VT_UI1 = 17,                 // An unsigned character.
    VT_UI2 = 18,                 // An unsigned short.
    VT_UI4 = 19,                 // An unsigned long.
    VT_I8 = 20,                  // A 64-bit integer.
    VT_UI8 = 21,                 // A 64-bit unsigned integer.
    VT_INT = 22,                 // An integer.
    VT_UINT = 23,                // An unsigned integer.
    VT_VOID = 24,                // A C-style void.
    VT_HRESULT  = 25,            // An HRESULT value.
    VT_PTR = 26,                 // A pointer type.
    VT_SAFEARRAY = 27,           // A safe array. Use VT_ARRAY in VARIANT.
    VT_CARRAY = 28,              // A C-style array.
    VT_USERDEFINED = 29,         // A user-defined type.
    VT_LPSTR = 30,               // A null-terminated string.
    VT_LPWSTR = 31,              // A wide null-terminated string.
    VT_RECORD = 36,              // A user-defined type.
    VT_INT_PTR = 37,             // A signed machine register size width.
    VT_UINT_PTR = 38,            // An unsigned machine register size width.
    VT_FILETIME = 64,            // A FILETIME value.
    VT_BLOB = 65,                // Length-prefixed bytes.
    VT_STREAM = 66,              // The name of the stream follows.
    VT_STORAGE = 67,             // The name of the storage follows.
    VT_STREAMED_OBJECT = 68,     // The stream contains an object.
    VT_STORED_OBJECT = 69,       // The storage contains an object.
    VT_BLOB_OBJECT = 70,         // The blob contains an object.
    VT_CF = 71,                  // A clipboard format.
    VT_CLSID = 72,               // A class ID.
    VT_VERSIONED_STREAM  = 73,   // A stream with a GUID version.
    VT_VECTOR = $1000,           // A simple counted array. The type of the contained field MUST be combined with other values by using the bitwise OR operation to indicate a counted field. The type of the contained field MUST be a COUNTEDARRAY.
    VT_ARRAY = $2000,            // A SAFEARRAY pointer.
    VT_BYREF = $4000,            // A void pointer for local use.
    VT_RESERVED = $8000,         // Reserved.
    VT_BSTR_BLOB = $fff,         // Reserved (is reserved for system use.)
    VT_ILLEGAL = $ffff,          //
    VT_ILLEGALMASKED = $fff,     //
    VT_TYPEMASK = $fff           //
    );
 {$EXTERNALSYM VARENUM}
 // For detailed information see: https://msdn.microsoft.com/en-us/library/cc235506.aspx

  PKSMULTIPLE_ITEM = ^KSMULTIPLE_ITEM;
  KSMULTIPLE_ITEM = record
    Size  : ULONG;
    Count : ULONG;
  end;
  {$EXTERNALSYM KSMULTIPLE_ITEM}

  PKSPROPERTY_DESCRIPTION = ^KSPROPERTY_DESCRIPTION;
  KSPROPERTY_DESCRIPTION = record
    AccessFlags      : ULONG;
    DescriptionSize  : ULONG;
    PropTypeSet      : KSIDENTIFIER;
    MembersListCount : ULONG;
    Reserved         : ULONG;
  end;
  {$EXTERNALSYM KSPROPERTY_DESCRIPTION}


const

  KSPROPERTY_MEMBER_RANGES        = $00000001;
  {$EXTERNALSYM KSPROPERTY_MEMBER_RANGES}
  KSPROPERTY_MEMBER_STEPPEDRANGES = $00000002;
  {$EXTERNALSYM KSPROPERTY_MEMBER_STEPPEDRANGES}
  KSPROPERTY_MEMBER_VALUES        = $00000003;
  {$EXTERNALSYM KSPROPERTY_MEMBER_VALUES}

  KSPROPERTY_MEMBER_FLAG_DEFAULT                   = $00000001;
  {$EXTERNALSYM KSPROPERTY_MEMBER_FLAG_DEFAULT}
  KSPROPERTY_MEMBER_FLAG_BASICSUPPORT_MULTICHANNEL = $00000002;
  {$EXTERNALSYM KSPROPERTY_MEMBER_FLAG_BASICSUPPORT_MULTICHANNEL}
  KSPROPERTY_MEMBER_FLAG_BASICSUPPORT_UNIFORM      = $00000004;
  {$EXTERNALSYM KSPROPERTY_MEMBER_FLAG_BASICSUPPORT_UNIFORM}

type

  PKSPROPERTY_MEMBERSHEADER = ^KSPROPERTY_MEMBERSHEADER;
  KSPROPERTY_MEMBERSHEADER = record
    MembersFlags : ULONG;
    MembersSize  : ULONG;
    MembersCount : ULONG;
    Flags        : ULONG;
  end;
  {$EXTERNALSYM KSPROPERTY_MEMBERSHEADER}

//------------------------------------------------------------------------------
// #if defined( _KS_NO_ANONYMOUS_STRUCTURES_ ) >> No actual need within Delphi
// however, you could change the case statement (0 or 1)  by decommenting the
// _KS_NO_ANONYMOUS_STRUCTURES_ constant (declared at top of this unit)

  PKSPROPERTY_BOUNDS_LONG = ^KSPROPERTY_BOUNDS_LONG;
  KSPROPERTY_BOUNDS_LONG = record
    case Integer of
      0: (SignedMinimum   : LONG;
          SignedMaximum   : LONG);
      1: (UnsignedMinimum : ULONG;
          UnsignedMaximum : ULONG);
  end;
  {$EXTERNALSYM KSPROPERTY_BOUNDS_LONG}

  PKSPROPERTY_BOUNDS_LONGLONG = ^KSPROPERTY_BOUNDS_LONGLONG;
  KSPROPERTY_BOUNDS_LONGLONG = record
    case integer of
      0: (SignedMinimum   : LONGLONG;
          SignedMaximum   : LONGLONG);
      1: (UnsignedMinimum : ULONGLONG;
          UnsignedMaximum : ULONGLONG);
  end;
  {$EXTERNALSYM KSPROPERTY_BOUNDS_LONGLONG}

//------------------------------------------------------------------------------

  PKSPROPERTY_STEPPING_LONG = ^KSPROPERTY_STEPPING_LONG;
  KSPROPERTY_STEPPING_LONG = record
    SteppingDelta : ULONG;
    Reserved      : ULONG;
    Bounds        : KSPROPERTY_BOUNDS_LONG;
  end;
  {$EXTERNALSYM KSPROPERTY_STEPPING_LONG}

  PKSPROPERTY_STEPPING_LONGLONG = ^KSPROPERTY_STEPPING_LONGLONG;
  KSPROPERTY_STEPPING_LONGLONG = record
    SteppingDelta : TULargeInteger;
    Bounds        : PKSPROPERTY_BOUNDS_LONGLONG;
  end;
  {$EXTERNALSYM KSPROPERTY_STEPPING_LONGLONG}

//===========================================================================


  PKSWORKER = pointer;


 // KSEVENTDATA //////////////////////////

  PKSEventHandle = ^_EventHandle;
  _EventHandle = record
    Event: THandle;
    Reserved: array[0..1] of ULONG_PTR;
  end;
  {$EXTERNALSYM _EventHandle}
  TKSEventHandle = _EventHandle;

  PKSSemaphoreHandle = ^_SemaphoreHandle;
  _SemaphoreHandle = record
    Semaphore : THandle;
    Reserved : ULONG;
    Adjustment : LONG;
  end;
  {$EXTERNALSYM _SemaphoreHandle}
  TKSSemaphoreHandle = _SemaphoreHandle;

  PKSAlignment = ^_Alignment;
  _Alignment = record
    Unused : Pointer;
    Alignment : array[0..1] of LONG_PTR;
  end;
  {$EXTERNALSYM _Alignment}
  TKSAlignment = _Alignment;

  PKSEVENTDATA = ^KSEVENTDATA;
  KSEVENTDATA = record
    NotificationType : ULONG;
    case integer of
      0: (EventHandle : _EventHandle);
      1: (SemaphoreHandle : _SemaphoreHandle);
      2: (Alignment: _Alignment);
  end;
  {$EXTERNALSYM KSEVENTDATA}

  //////////////////////////////////////////

const

  KSEVENTF_EVENT_HANDLE       = $00000001;
  {$EXTERNALSYM KSEVENTF_EVENT_HANDLE}
  KSEVENTF_SEMAPHORE_HANDLE   = $00000002;
  {$EXTERNALSYM KSEVENTF_SEMAPHORE_HANDLE}
  KSEVENTF_EVENT_OBJECT       = $00000004;
  {$EXTERNALSYM KSEVENTF_EVENT_OBJECT}
  KSEVENTF_SEMAPHORE_OBJECT   = $00000008;
  {$EXTERNALSYM KSEVENTF_SEMAPHORE_OBJECT}
  KSEVENTF_DPC                = $00000010;
  {$EXTERNALSYM KSEVENTF_DPC}
  KSEVENTF_WORKITEM           = $00000020;
  {$EXTERNALSYM KSEVENTF_WORKITEM}
  KSEVENTF_KSWORKITEM         = $00000080;
  {$EXTERNALSYM KSEVENTF_KSWORKITEM}

  KSEVENT_TYPE_ENABLE         = $00000001;
  {$EXTERNALSYM KSEVENT_TYPE_ENABLE}
  KSEVENT_TYPE_ONESHOT        = $00000002;
  {$EXTERNALSYM KSEVENT_TYPE_ONESHOT}
  KSEVENT_TYPE_ENABLEBUFFERED = $00000004;
  {$EXTERNALSYM KSEVENT_TYPE_ENABLEBUFFERED}
  KSEVENT_TYPE_SETSUPPORT     = $00000100;
  {$EXTERNALSYM KSEVENT_TYPE_SETSUPPORT}
  KSEVENT_TYPE_BASICSUPPORT   = $00000200;
  {$EXTERNALSYM KSEVENT_TYPE_BASICSUPPORT}
  KSEVENT_TYPE_QUERYBUFFER    = $00000400;
  {$EXTERNALSYM KSEVENT_TYPE_QUERYBUFFER}

  KSEVENT_TYPE_TOPOLOGY       = $10000000;
  {$EXTERNALSYM KSEVENT_TYPE_TOPOLOGY}


type

  PKSQUERYBUFFER = ^KSQUERYBUFFER;
  KSQUERYBUFFER = record
    Event     : KSEVENT;
    EventData : PKSEVENTDATA;
    Reserved  : Pointer;
  end;
  {$EXTERNALSYM KSQUERYBUFFER}

  PKSRELATIVEEVENT = ^KSRELATIVEEVENT;
  KSRELATIVEEVENT = record
     Size  : ULONG;
     Flags : ULONG;
     case integer of
       0: (ObjectHandle  : THandle;
           Reserved      : Pointer;
           Event         : KSEVENT;
           EventData     : KSEVENTDATA);
       1: (ObjectPointer : Pointer);
  end;
  {$EXTERNALSYM KSRELATIVEEVENT}


const

  KSRELATIVEEVENT_FLAG_HANDLE  = $00000001;
  {$EXTERNALSYM KSRELATIVEEVENT_FLAG_HANDLE}
  KSRELATIVEEVENT_FLAG_POINTER = $00000002;
  {$EXTERNALSYM KSRELATIVEEVENT_FLAG_POINTER}

//===========================================================================

type

  PKSEVENT_TIME_MARK = ^KSEVENT_TIME_MARK;
  KSEVENT_TIME_MARK = record
    EventData : KSEVENTDATA;
    MarkTime  : LONGLONG;
  end;
  {$EXTERNALSYM KSEVENT_TIME_MARK}

  PKSEVENT_TIME_INTERVAL = ^KSEVENT_TIME_INTERVAL;
  KSEVENT_TIME_INTERVAL = record
    EventData : KSEVENTDATA;
    TimeBase  : LONGLONG;
    Interval  : LONGLONG;
  end;
  {$EXTERNALSYM KSEVENT_TIME_INTERVAL}

  PKSINTERVAL = ^KSINTERVAL;
  KSINTERVAL = record
    TimeBase : LONGLONG;
    Interval : LONGLONG;
  end;
  {$EXTERNALSYM KSINTERVAL}

//===========================================================================

const

  KSPROPSETID_General     : TGUID = '{1464EDA5-6A8F-11D1-9AA7-00A0C9223196}';
  {$EXTERNALSYM KSPROPSETID_General}


type

  PKSPROPERTY_GENERAL = ^KSPROPERTY_GENERAL;
  KSPROPERTY_GENERAL = (
    KSPROPERTY_GENERAL_COMPONENTID = 0
  );
  {$EXTERNALSYM KSPROPERTY_GENERAL}

  PKSCOMPONENTID = ^KSCOMPONENTID;
  KSCOMPONENTID = record
    Manufacturer : TGUID;
    Product      : TGUID;
    Component    : TGUID;
    Name         : TGUID;
    Version      : ULONG;
    Revision     : ULONG;
  end;
  {$EXTERNALSYM KSCOMPONENTID}


const

  KSMETHODSETID_StreamIo  : TGUID = '{65D003CA-1523-11D2-B27A-00A0C9223196}';
  {$EXTERNALSYM KSMETHODSETID_StreamIo}


type

  PKSMETHOD_STREAMIO = ^KSMETHOD_STREAMIO;
  KSMETHOD_STREAMIO = (
    KSMETHOD_STREAMIO_READ = 0,
    KSMETHOD_STREAMIO_WRITE = 1
  );
  {$EXTERNALSYM KSMETHOD_STREAMIO}


const

  KSPROPSETID_MediaSeeking : TGUID = '{EE904F0C-D09B-11D0-ABE9-00A0C9223196}';
  {$EXTERNALSYM KSPROPSETID_MediaSeeking}


type

  PKSPROPERTY_MEDIASEEKING = ^KSPROPERTY_MEDIASEEKING;
  KSPROPERTY_MEDIASEEKING = (
    KSPROPERTY_MEDIASEEKING_CAPABILITIES = 0,
    KSPROPERTY_MEDIASEEKING_FORMATS = 1,
    KSPROPERTY_MEDIASEEKING_TIMEFORMAT = 2,
    KSPROPERTY_MEDIASEEKING_POSITION = 3,
    KSPROPERTY_MEDIASEEKING_STOPPOSITION = 4,
    KSPROPERTY_MEDIASEEKING_POSITIONS = 5,
    KSPROPERTY_MEDIASEEKING_DURATION = 6,
    KSPROPERTY_MEDIASEEKING_AVAILABLE = 7,
    KSPROPERTY_MEDIASEEKING_PREROLL = 8,
    KSPROPERTY_MEDIASEEKING_CONVERTTIMEFORMAT = 9);
  {$EXTERNALSYM KSPROPERTY_MEDIASEEKING}

  PKS_SEEKING_FLAGS = ^KS_SEEKING_FLAGS;
  KS_SEEKING_FLAGS = (
    KS_SEEKING_NoPositioning = 0,
    KS_SEEKING_AbsolutePositioning,
    KS_SEEKING_RelativePositioning,
    KS_SEEKING_IncrementalPositioning,
    KS_SEEKING_PositioningBitsMask = $3,
    KS_SEEKING_SeekToKeyFrame,
    KS_SEEKING_ReturnTime          = $8);
  {$EXTERNALSYM KS_SEEKING_FLAGS}

  PKS_SEEKING_CAPABILITIES = ^KS_SEEKING_CAPABILITIES;
  KS_SEEKING_CAPABILITIES       = (
    KS_SEEKING_CanSeekAbsolute  = $1,
    KS_SEEKING_CanSeekForwards  = $2,
    KS_SEEKING_CanSeekBackwards = $4,
    KS_SEEKING_CanGetCurrentPos = $8,
    KS_SEEKING_CanGetStopPos    = $10,
    KS_SEEKING_CanGetDuration   = $20,
    KS_SEEKING_CanPlayBackwards = $40);
  {$EXTERNALSYM KS_SEEKING_CAPABILITIES}


type

  PKSPROPERTY_POSITIONS = ^KSPROPERTY_POSITIONS;
  KSPROPERTY_POSITIONS = record
    Current      : LONGLONG;
    Stop         : LONGLONG;
    CurrentFlags : KS_SEEKING_FLAGS;
    StopFlags    : KS_SEEKING_FLAGS;
  end;
  {$EXTERNALSYM KSPROPERTY_POSITIONS}

  PKSPROPERTY_MEDIAAVAILABLE = ^KSPROPERTY_MEDIAAVAILABLE;
  KSPROPERTY_MEDIAAVAILABLE = record
    Earliest : LONGLONG;
    Latest   : LONGLONG;
  end;
  {$EXTERNALSYM KSPROPERTY_MEDIAAVAILABLE}

  PKSP_TIMEFORMAT = ^KSP_TIMEFORMAT;
  KSP_TIMEFORMAT = record
    Property_    : KSPROPERTY;
    SourceFormat : TGUID;
    TargetFormat : TGUID;
    Time         : LONGLONG;
  end;
  {$EXTERNALSYM KSP_TIMEFORMAT}



//===========================================================================

const

  KSPROPSETID_Topology : TGUID = '{720D4AC0-7533-11D0-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSPROPSETID_Topology}


type

  PKSPROPERTY_TOPOLOGY = ^KSPROPERTY_TOPOLOGY;
  KSPROPERTY_TOPOLOGY = (
    KSPROPERTY_TOPOLOGY_CATEGORIES,
    KSPROPERTY_TOPOLOGY_NODES,
    KSPROPERTY_TOPOLOGY_CONNECTIONS,
    KSPROPERTY_TOPOLOGY_NAME);
  {$EXTERNALSYM KSPROPERTY_TOPOLOGY}




//=============================================================================

//
// properties used by graph manager to talk to particular filters
//


const
  KSPROPSETID_GM : TGUID = '{AF627536-E719-11D2-8A1D-006097D2DF5D}';
  {$EXTERNALSYM KSPROPSETID_GM}


type

//
// Commands
//

  PKSPROPERTY_GM = ^KSPROPERTY_GM;
  KSPROPERTY_GM = (
    KSPROPERTY_GM_GRAPHMANAGER,
    KSPROPERTY_GM_TIMESTAMP_CLOCK,
    KSPROPERTY_GM_RATEMATCH,
    KSPROPERTY_GM_RENDER_CLOCK);
  {$EXTERNALSYM KSPROPERTY_GM}


const

  KSCATEGORY_BRIDGE                  : TGUID = '{085AFF00-62CE-11CF-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSCATEGORY_BRIDGE}
  KSCATEGORY_CAPTURE                 : TGUID = '{65E8773D-8F56-11D0-A3B9-00A0C9223196}';
  {$EXTERNALSYM KSCATEGORY_CAPTURE}

  KSCATEGORY_VIDEO_CAMERA            : TGUID = '{E5323777-F976-4f5b-9B55-B94699C46E44}';
  {$EXTERNALSYM KSCATEGORY_VIDEO_CAMERA}
  KSCATEGORY_SENSOR_CAMERA           : TGUID = '{24E552D7-6523-47F7-A647-D3465BF1F5CA}';
  {$EXTERNALSYM KSCATEGORY_SENSOR_CAMERA}
  KSCATEGORY_NETWORK_CAMERA          : TGUID = '{B8238652-B500-41EB-B4F3-4234F7F5AE99}';
  {$EXTERNALSYM KSCATEGORY_NETWORK_CAMERA}

  KSCATEGORY_SENSOR_GROUP            : TGUID = '{669C7214-0A88-4311-A7F3-4E79820E33BD}';
  {$EXTERNALSYM KSCATEGORY_SENSOR_GROUP}

  KSCATEGORY_RENDER                  : TGUID = '{65E8773E-8F56-11D0-A3B9-00A0C9223196}';
  {$EXTERNALSYM KSCATEGORY_RENDER}
  KSCATEGORY_MIXER                   : TGUID = '{AD809C00-7B88-11D0-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSCATEGORY_MIXER}
  KSCATEGORY_SPLITTER                : TGUID = '{0A4252A0-7E70-11D0-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSCATEGORY_SPLITTER}
  KSCATEGORY_DATACOMPRESSOR          : TGUID = '{1E84C900-7E70-11D0-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSCATEGORY_DATACOMPRESSOR}
  KSCATEGORY_DATADECOMPRESSOR        : TGUID = '{2721AE20-7E70-11D0-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSCATEGORY_DATADECOMPRESSOR}
  KSCATEGORY_DATATRANSFORM           : TGUID = '{2EB07EA0-7E70-11D0-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSCATEGORY_DATATRANSFORM}


//
// KSMFT_CATEGORY_XXX are MF Transform category guids redefined in ks.h
// to facilitate KS Mini drivers to register KS Filters under MF Transform categories.
//

  KSMFT_CATEGORY_VIDEO_DECODER      :	TGUID = '{d6c02d4b-6833-45b4-971a-05a4b04bab91}';
  {$EXTERNALSYM KSMFT_CATEGORY_VIDEO_DECODER}
  KSMFT_CATEGORY_VIDEO_ENCODER      :	TGUID = '{f79eac7d-e545-4387-bdee-d647d7bde42a}';
  {$EXTERNALSYM KSMFT_CATEGORY_VIDEO_ENCODER}
  KSMFT_CATEGORY_VIDEO_EFFECT       :	TGUID = '{12e17c21-532c-4a6e-8a1c-40825a736397}';
  {$EXTERNALSYM KSMFT_CATEGORY_VIDEO_EFFECT}
  KSMFT_CATEGORY_MULTIPLEXER        :	TGUID = '{059c561e-05ae-4b61-b69d-55b61ee54a7b}';
  {$EXTERNALSYM KSMFT_CATEGORY_MULTIPLEXER}
  KSMFT_CATEGORY_DEMULTIPLEXER      :	TGUID = '{a8700a7a-939b-44c5-99d7-76226b23b3f1}';
  {$EXTERNALSYM KSMFT_CATEGORY_DEMULTIPLEXER}
  KSMFT_CATEGORY_AUDIO_DECODER      :	TGUID = '{9ea73fb4-ef7a-4559-8d5d-719d8f0426c7}';
  {$EXTERNALSYM KSMFT_CATEGORY_AUDIO_DECODER}
  KSMFT_CATEGORY_AUDIO_ENCODER      :	TGUID = '{91c64bd0-f91e-4d8c-9276-db248279d975}';
  {$EXTERNALSYM KSMFT_CATEGORY_AUDIO_ENCODER}
  KSMFT_CATEGORY_AUDIO_EFFECT       :	TGUID = '{11064c48-3648-4ed0-932e-05ce8ac811b7}';
  {$EXTERNALSYM KSMFT_CATEGORY_AUDIO_EFFECT}
  KSMFT_CATEGORY_VIDEO_PROCESSOR    :	TGUID = '{302ea3fc-aa5f-47f9-9f7a-c2188bb16320}';
  {$EXTERNALSYM KSMFT_CATEGORY_VIDEO_PROCESSOR}
  KSMFT_CATEGORY_OTHER              :	TGUID = '{90175d57-b7ea-4901-aeb3-933a8747756f}';
  {$EXTERNALSYM KSMFT_CATEGORY_OTHER}

  KSCATEGORY_COMMUNICATIONSTRANSFORM : TGUID = '{CF1DDA2C-9743-11D0-A3EE-00A0C9223196}';
  {$EXTERNALSYM KSCATEGORY_COMMUNICATIONSTRANSFORM}
  KSCATEGORY_INTERFACETRANSFORM      : TGUID = '{CF1DDA2D-9743-11D0-A3EE-00A0C9223196}';
  {$EXTERNALSYM KSCATEGORY_INTERFACETRANSFORM}
  KSCATEGORY_MEDIUMTRANSFORM         : TGUID = '{CF1DDA2E-9743-11D0-A3EE-00A0C9223196}';
  {$EXTERNALSYM KSCATEGORY_MEDIUMTRANSFORM}
  KSCATEGORY_FILESYSTEM              : TGUID = '{760FED5E-9357-11D0-A3CC-00A0C9223196}';
  {$EXTERNALSYM KSCATEGORY_FILESYSTEM}


// KSNAME_Clock

  KSCATEGORY_CLOCK   : TGUID = '{53172480-4791-11D0-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSCATEGORY_CLOCK}
  KSCATEGORY_PROXY   : TGUID = '{97EBAACA-95BD-11D0-A3EA-00A0C9223196}';
  {$EXTERNALSYM KSCATEGORY_PROXY}
  KSCATEGORY_QUALITY : TGUID = '{97EBAACB-95BD-11D0-A3EA-00A0C9223196}';
  {$EXTERNALSYM KSCATEGORY_QUALITY}


type

  PKSTOPOLOGY_CONNECTION = ^KSTOPOLOGY_CONNECTION;
  KSTOPOLOGY_CONNECTION = record
    FromNode    : ULONG;
    FromNodePin : ULONG;
    ToNode      : ULONG;
    ToNodePin   : ULONG;
  end;
  {$EXTERNALSYM KSTOPOLOGY_CONNECTION}

  PKSTOPOLOGY = ^KSTOPOLOGY;
  KSTOPOLOGY = record
    CategoriesCount          : ULONG;
    Categories               : PGUID;
    TopologyNodesCount       : ULONG;
    TopologyNodes            : PGUID;
    TopologyConnectionsCount : ULONG;
    TopologyConnections      : PKSTOPOLOGY_CONNECTION;
    TopologyNodesNames       : PGUID;
    Reserved                 : ULONG;
  end;
  {$EXTERNALSYM KSTOPOLOGY}


const

  KSFILTER_NODE = ULONG(-1);
  {$EXTERNALSYM KSFILTER_NODE}
  KSALL_NODES   = ULONG(-1);
  {$EXTERNALSYM KSALL_NODES}


type

  PKSNODE_CREATE = ^KSNODE_CREATE;
  KSNODE_CREATE = record
    CreateFlags : ULONG;
    Node        : ULONG;
  end;
  {$EXTERNALSYM KSNODE_CREATE}

//===========================================================================


const

// TIME_FORMAT_NONE  (= GUID_NULL)  '{}';
  KSTIME_FORMAT_NONE       : TGUID = '{00000000-0000-0000-0000-000000000000}';
  {$EXTERNALSYM KSTIME_FORMAT_NONE}
// TIME_FORMAT_FRAME
  KSTIME_FORMAT_FRAME      : TGUID = '{7b785570-8c82-11cf-bc0c-00aa00ac74f6}';
  {$EXTERNALSYM KSTIME_FORMAT_FRAME}
// TIME_FORMAT_BYTE
  KSTIME_FORMAT_BYTE        :	TGUID = '{7b785571-8c82-11cf-bc0c-00aa00ac74f6}';
  {$EXTERNALSYM KSTIME_FORMAT_BYTE}
// TIME_FORMAT_SAMPLE
  KSTIME_FORMAT_SAMPLE      :	TGUID = '{7b785572-8c82-11cf-bc0c-00aa00ac74f6}';
  {$EXTERNALSYM KSTIME_FORMAT_SAMPLE}
// TIME_FORMAT_FIELD
  KSTIME_FORMAT_FIELD       :	TGUID = '{7b785573-8c82-11cf-bc0c-00aa00ac74f6}';
  {$EXTERNALSYM KSTIME_FORMAT_FIELD}
// TIME_FORMAT_MEDIA_TIME
  KSTIME_FORMAT_MEDIA_TIME  :	TGUID = '{7b785574-8c82-11cf-bc0c-00aa00ac74f6}';
  {$EXTERNALSYM KSTIME_FORMAT_MEDIA_TIME}

//===========================================================================

type

  PKSPIN_INTERFACE = ^KSPIN_INTERFACE;
  KSPIN_INTERFACE = KSIDENTIFIER;
  {$EXTERNALSYM KSPIN_INTERFACE}


const

  KSINTERFACESETID_Standard :	TGUID = '{1A8766A0-62CE-11CF-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSINTERFACESETID_Standard}


type

  PKSINTERFACE_STANDARD = ^KSINTERFACE_STANDARD;
  KSINTERFACE_STANDARD = (
    KSINTERFACE_STANDARD_STREAMING,
    KSINTERFACE_STANDARD_LOOPED_STREAMING,
    KSINTERFACE_STANDARD_CONTROL  // Reserved for system use
  );
  {$EXTERNALSYM KSINTERFACE_STANDARD}
  TKSInterfaceStandard = KSINTERFACE_STANDARD;
  {$EXTERNALSYM TKSInterfaceStandard}

const

  KSINTERFACESETID_FileIo :	TGUID = '{8C6F932C-E771-11D0-B8FF-00A0C9223196}';
  {$EXTERNALSYM KSINTERFACESETID_FileIo}


type
  PKSINTERFACE_FILEIO = ^KSINTERFACE_FILEIO;
  KSINTERFACE_FILEIO = (KSINTERFACE_FILEIO_STREAMING);
  {$EXTERNALSYM KSINTERFACE_FILEIO}

//===========================================================================

const


  KSMEDIUM_TYPE_ANYINSTANCE = 0;
  {$EXTERNALSYM KSMEDIUM_TYPE_ANYINSTANCE}


  KSMEDIUMSETID_Standard  :	TGUID = '{4747B320-62CE-11CF-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSMEDIUMSETID_Standard}


  // For compatibility only
  KSMEDIUM_STANDARD_DEVIO = KSMEDIUM_TYPE_ANYINSTANCE;
  {$EXTERNALSYM KSMEDIUM_STANDARD_DEVIO}

//===========================================================================

  KSPROPSETID_Pin  :	TGUID = '{8C134960-51AD-11CF-878A-94F801C10000}';
  {$EXTERNALSYM KSPROPSETID_Pin}


type
  PKSPROPERTY_PIN = ^KSPROPERTY_PIN;
  KSPROPERTY_PIN = (
    KSPROPERTY_PIN_CINSTANCES,
    KSPROPERTY_PIN_CTYPES,
    KSPROPERTY_PIN_DATAFLOW,
    KSPROPERTY_PIN_DATARANGES,
    KSPROPERTY_PIN_DATAINTERSECTION,
    KSPROPERTY_PIN_INTERFACES,
    KSPROPERTY_PIN_MEDIUMS,
    KSPROPERTY_PIN_COMMUNICATION,
    KSPROPERTY_PIN_GLOBALCINSTANCES,
    KSPROPERTY_PIN_NECESSARYINSTANCES,
    KSPROPERTY_PIN_PHYSICALCONNECTION,
    KSPROPERTY_PIN_CATEGORY,
    KSPROPERTY_PIN_NAME,
    KSPROPERTY_PIN_CONSTRAINEDDATARANGES,
    KSPROPERTY_PIN_PROPOSEDATAFORMAT,
    KSPROPERTY_PIN_PROPOSEDATAFORMAT2,
    KSPROPERTY_PIN_MODEDATAFORMATS);
  {$EXTERNALSYM KSPROPERTY_PIN}


const

  KSPROPERTY_PIN_FLAGS_ATTRIBUTE_RANGE_AWARE = $00000001;
  {$EXTERNALSYM KSPROPERTY_PIN_FLAGS_ATTRIBUTE_RANGE_AWARE}
  KSPROPERTY_PIN_FLAGS_MASK = $00000001;  // = KSPROPERTY_PIN_FLAGS_ATTRIBUTE_RANGE_AWARE
  {$EXTERNALSYM KSPROPERTY_PIN_FLAGS_MASK}

type

  PKSP_PIN = ^KSP_PIN;
  KSP_PIN = record
    Property_: KSPROPERTY;
    PinId: ULONG;
    case integer of
      0: (Reserved: ULONG);
      1: (Flags: ULONG);
  end;
  {$EXTERNALSYM KSP_PIN}

  PKSE_PIN = ^KSE_PIN;
  KSE_PIN = record
    Event: KSEVENT;
    PinId: ULONG;
    Reserved: ULONG;
  end;
  {$EXTERNALSYM KSE_PIN}

const

  KSINSTANCE_INDETERMINATE = ULONG(-1);
  {$EXTERNALSYM KSINSTANCE_INDETERMINATE}


type

  PKSPIN_CINSTANCES = ^KSPIN_CINSTANCES;
  KSPIN_CINSTANCES = record
    PossibleCount : ULONG;
    CurrentCount  : ULONG;
  end;
  {$EXTERNALSYM KSPIN_CINSTANCES}

  PKSPIN_DATAFLOW = ^KSPIN_DATAFLOW;
  KSPIN_DATAFLOW = (
    KSPIN_DATAFLOW_Invalid,
    KSPIN_DATAFLOW_IN,
    KSPIN_DATAFLOW_OUT);
  {$EXTERNALSYM KSPIN_DATAFLOW}

const

  KSDATAFORMAT_BIT_TEMPORAL_COMPRESSION =  0;
  {$EXTERNALSYM KSDATAFORMAT_BIT_TEMPORAL_COMPRESSION}
  KSDATAFORMAT_TEMPORAL_COMPRESSION     =  (1 shl KSDATAFORMAT_BIT_TEMPORAL_COMPRESSION);
  {$EXTERNALSYM KSDATAFORMAT_TEMPORAL_COMPRESSION}
  KSDATAFORMAT_BIT_ATTRIBUTES           =  1;
  {$EXTERNALSYM KSDATAFORMAT_BIT_ATTRIBUTES}
  KSDATAFORMAT_ATTRIBUTES               =  (1 shl KSDATAFORMAT_BIT_ATTRIBUTES);
  {$EXTERNALSYM KSDATAFORMAT_ATTRIBUTES}

  KSDATARANGE_BIT_ATTRIBUTES            = 1;
  {$EXTERNALSYM KSDATARANGE_BIT_ATTRIBUTES}
  KSDATARANGE_ATTRIBUTES                = (1 shl KSDATARANGE_BIT_ATTRIBUTES);
  {$EXTERNALSYM KSDATARANGE_ATTRIBUTES}
  KSDATARANGE_BIT_REQUIRED_ATTRIBUTES   = 2;
  {$EXTERNALSYM KSDATARANGE_BIT_REQUIRED_ATTRIBUTES}
  KSDATARANGE_REQUIRED_ATTRIBUTES       = (1 shl KSDATARANGE_BIT_REQUIRED_ATTRIBUTES);
  {$EXTERNALSYM KSDATARANGE_REQUIRED_ATTRIBUTES}


type

  PKSDATAFORMAT = ^KSDATAFORMAT;
  PKSDATARANGE = ^KSDATARANGE;
  KSDATAFORMAT = record
    case integer of
    0: (FormatSize  : ULONG;
        Flags       : ULONG;
        SampleSize  : ULONG;
        Reserved    : ULONG;
        MajorFormat : TGUID;
        SubFormat   : TGUID;
        Specifier   : TGUID);
    1: (Alignment   : int64);
  end;
  {$EXTERNALSYM KSDATAFORMAT}
  KSDATARANGE = KSDATAFORMAT;
  {$EXTERNALSYM KSDATARANGE}

const

  KSATTRIBUTE_REQUIRED = $00000001;
  {$EXTERNALSYM KSATTRIBUTE_REQUIRED}


type

  PKSATTRIBUTE = ^KSATTRIBUTE;
  KSATTRIBUTE = record
    Size      : ULONG;
    Flags     : ULONG;
    Attribute : TGUID;
  end;
  {$EXTERNALSYM KSATTRIBUTE}


  PKSPIN_COMMUNICATION = ^KSPIN_COMMUNICATION;
  KSPIN_COMMUNICATION = (
    KSPIN_COMMUNICATION_NONE,
    KSPIN_COMMUNICATION_SINK,
    KSPIN_COMMUNICATION_SOURCE,
    KSPIN_COMMUNICATION_BOTH,
    KSPIN_COMMUNICATION_BRIDGE);
  {$EXTERNALSYM KSPIN_COMMUNICATION}


  PKSPIN_MEDIUM = ^KSPIN_MEDIUM;
  KSPIN_MEDIUM = KSIDENTIFIER;
  {$EXTERNALSYM KSPIN_MEDIUM}


  PKSPIN_CONNECT = ^KSPIN_CONNECT;
  KSPIN_CONNECT = record
    Interface_  : KSPIN_INTERFACE;
    Medium      : KSPIN_MEDIUM;
    PinId       : ULONG;
    PinToHandle : THandle;
    Priority    : KSPRIORITY;
  end;
  {$EXTERNALSYM KSPIN_CONNECT}


  PKSPIN_PHYSICALCONNECTION = ^KSPIN_PHYSICALCONNECTION;
  KSPIN_PHYSICALCONNECTION = record
    Size             : ULONG;
    Pin              : ULONG;
    SymbolicLinkName : array of WCHAR;
  end;
  {$EXTERNALSYM KSPIN_PHYSICALCONNECTION}


const

  KSEVENTSETID_PinCapsChange :	TGUID = '{DD4F192E-3B78-49AD-A534-2C315B822000}';
  {$EXTERNALSYM KSEVENTSETID_PinCapsChange}

type

  PKSEVENT_PINCAPS_CHANGENOTIFICATIONS = ^KSEVENT_PINCAPS_CHANGENOTIFICATIONS;
  KSEVENT_PINCAPS_CHANGENOTIFICATIONS = (
    KSEVENT_PINCAPS_FORMATCHANGE,
    KSEVENT_PINCAPS_JACKINFOCHANGE);
  {$EXTERNALSYM KSEVENT_PINCAPS_CHANGENOTIFICATIONS}

const

  KSEVENTSETID_VolumeLimit :	TGUID = '{DA168465-3A7C-4858-9D4A-3E8E24701AEF}';
  {$EXTERNALSYM KSEVENTSETID_VolumeLimit}

type

  PKSEVENT_VOLUMELIMIT = ^KSEVENT_VOLUMELIMIT;
  KSEVENT_VOLUMELIMIT = (KSEVENT_VOLUMELIMIT_CHANGED);
  {$EXTERNALSYM KSEVENT_VOLUMELIMIT}


const
  KSNAME_Filter       : TGUID = '{9b365890-165f-11d0-a195-0020afd156e4}';
  {$EXTERNALSYM KSNAME_Filter}
  KSSTRING_Filter             = '{9B365890-165F-11D0-A195-0020AFD156E4}';
  {$EXTERNALSYM KSSTRING_Filter}

  KSNAME_Pin          : TGUID = '{146F1A80-4791-11D0-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSNAME_Pin}
  KSSTRING_Pin                = '{146F1A80-4791-11D0-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSSTRING_Pin}

  KSNAME_Clock        : TGUID = '{53172480-4791-11D0-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSNAME_Clock}
  KSSTRING_Clock              = '{53172480-4791-11D0-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSSTRING_Clock}

  KSNAME_Allocator    : TGUID = '{642F5D00-4791-11D0-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSNAME_Allocator}
  KSSTRING_Allocator          = '{642F5D00-4791-11D0-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSSTRING_Allocator}
  KSSTRING_AllocatorEx        = '{091BB63B-603F-11D1-B067-00A0C9062802}';
  {$EXTERNALSYM KSSTRING_AllocatorEx}


  KSNAME_TopologyNode : TGUID = '{0621061A-EE75-11D0-B915-00A0C9223196}';
  {$EXTERNALSYM KSNAME_TopologyNode}
  KSSTRING_TopologyNode       = '{0621061A-EE75-11D0-B915-00A0C9223196}';
  {$EXTERNALSYM KSSTRING_TopologyNode}


const

  // MEDIATYPE_NULL (= GUID_NULL)
  KSDATAFORMAT_TYPE_WILDCARD       : TGUID = '{00000000-0000-0000-0000-000000000000}';
  {$EXTERNALSYM KSDATAFORMAT_TYPE_WILDCARD}
  // MEDIASUBTYPE_NULL (= GUID_NULL)
  KSDATAFORMAT_SUBTYPE_WILDCARD    : TGUID = '{00000000-0000-0000-0000-000000000000}';
  {$EXTERNALSYM KSDATAFORMAT_SUBTYPE_WILDCARD}


  // MEDIATYPE_Stream
  KSDATAFORMAT_TYPE_STREAM         : TGUID = '{E436EB83-524F-11CE-9F53-0020AF0BA770}';
  {$EXTERNALSYM KSDATAFORMAT_TYPE_STREAM}
  // MEDIASUBTYPE_None
  KSDATAFORMAT_SUBTYPE_NONE        : TGUID = '{E436EB8E-524F-11CE-9F53-0020AF0BA770}';
  {$EXTERNALSYM KSDATAFORMAT_SUBTYPE_NONE}

  // (= GUID_NULL)
  KSDATAFORMAT_SPECIFIER_WILDCARD   : TGUID = '{00000000-0000-0000-0000-000000000000}';
  {$EXTERNALSYM KSDATAFORMAT_SPECIFIER_WILDCARD}
  KSDATAFORMAT_SPECIFIER_FILENAME   : TGUID = '{AA797B40-E974-11CF-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSDATAFORMAT_SPECIFIER_FILENAME}
  KSDATAFORMAT_SPECIFIER_FILEHANDLE : TGUID = '{65E8773C-8F56-11D0-A3B9-00A0C9223196}';
  {$EXTERNALSYM KSDATAFORMAT_SPECIFIER_FILEHANDLE}


  // FORMAT_None
  KSDATAFORMAT_SPECIFIER_NONE : TGUID = '{0F6417D6-C318-11D0-A43F-00A0C9223196}';
  {$EXTERNALSYM KSDATAFORMAT_SPECIFIER_NONE}

  //===========================================================================

  KSPROPSETID_Quality : TGUID = '{D16AD380-AC1A-11CF-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSPROPSETID_Quality}


type

  PKSPROPERTY_QUALITY = ^KSPROPERTY_QUALITY;
  KSPROPERTY_QUALITY = (
    KSPROPERTY_QUALITY_REPORT,
    KSPROPERTY_QUALITY_ERROR);
  {$EXTERNALSYM KSPROPERTY_QUALITY}

//===========================================================================

const

  KSPROPSETID_Connection :	TGUID = '{1D58C920-AC9B-11CF-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSPROPSETID_Connection}

type

  PKSPROPERTY_CONNECTION = ^KSPROPERTY_CONNECTION;
  KSPROPERTY_CONNECTION = (
    KSPROPERTY_CONNECTION_STATE,
    KSPROPERTY_CONNECTION_PRIORITY,
    KSPROPERTY_CONNECTION_DATAFORMAT,
    KSPROPERTY_CONNECTION_ALLOCATORFRAMING,
    KSPROPERTY_CONNECTION_PROPOSEDATAFORMAT,
    KSPROPERTY_CONNECTION_ACQUIREORDERING,
    KSPROPERTY_CONNECTION_ALLOCATORFRAMING_EX,
    KSPROPERTY_CONNECTION_STARTAT);
  {$EXTERNALSYM KSPROPERTY_CONNECTION}

//===========================================================================
//VRAM transport related propset
//===========================================================================
const

  KSPROPSETID_MemoryTransport :	TGUID = '{0A3D1C5D-5243-4819-9ED0-AEE8044CEE2B}';
  {$EXTERNALSYM KSPROPSETID_MemoryTransport}

  // a value of zero is ignored
  KSPROPERTY_MEMORY_TRANSPORT = 1; //Sets pin's memory transport mechanism e.g. VRAM or SYSMEM
  {$EXTERNALSYM KSPROPERTY_MEMORY_TRANSPORT}


//===========================================================================
  //
  // pins flags
  //
const
  KSALLOCATOR_REQUIREMENTF_INPLACE_MODIFIER  = $00000001;
  {$EXTERNALSYM KSALLOCATOR_REQUIREMENTF_INPLACE_MODIFIER}
  KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY     = $00000002;
  {$EXTERNALSYM KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY}
  KSALLOCATOR_REQUIREMENTF_FRAME_INTEGRITY   = $00000004;
  {$EXTERNALSYM KSALLOCATOR_REQUIREMENTF_FRAME_INTEGRITY}
  KSALLOCATOR_REQUIREMENTF_MUST_ALLOCATE     = $00000008;
  {$EXTERNALSYM KSALLOCATOR_REQUIREMENTF_MUST_ALLOCATE}
  KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY_CUSTOM_ALLOCATION = $00000010;
  {$EXTERNALSYM KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY_CUSTOM_ALLOCATION}
  KSALLOCATOR_REQUIREMENTF_PREFERENCES_ONLY  = $80000000;
  {$EXTERNALSYM KSALLOCATOR_REQUIREMENTF_PREFERENCES_ONLY}

  KSALLOCATOR_OPTIONF_COMPATIBLE             = $00000001;
  {$EXTERNALSYM KSALLOCATOR_OPTIONF_COMPATIBLE}
  KSALLOCATOR_OPTIONF_SYSTEM_MEMORY          = $00000002;
  {$EXTERNALSYM KSALLOCATOR_OPTIONF_SYSTEM_MEMORY}
  KSALLOCATOR_OPTIONF_VALID                  = $00000003;
  {$EXTERNALSYM KSALLOCATOR_OPTIONF_VALID}
  //
  // pins extended framing flags
  //
  KSALLOCATOR_FLAG_PARTIAL_READ_SUPPORT      = $00000010;
  {$EXTERNALSYM KSALLOCATOR_FLAG_PARTIAL_READ_SUPPORT}
  KSALLOCATOR_FLAG_DEVICE_SPECIFIC           = $00000020;
  {$EXTERNALSYM KSALLOCATOR_FLAG_DEVICE_SPECIFIC}
  KSALLOCATOR_FLAG_CAN_ALLOCATE              = $00000040;
  {$EXTERNALSYM KSALLOCATOR_FLAG_CAN_ALLOCATE}
  KSALLOCATOR_FLAG_INSIST_ON_FRAMESIZE_RATIO = $00000080;
  {$EXTERNALSYM KSALLOCATOR_FLAG_INSIST_ON_FRAMESIZE_RATIO}
  //
  // allocator pipes flags
  //
  // there is at least one data modification in a pipe
  KSALLOCATOR_FLAG_NO_FRAME_INTEGRITY        = $00000100;
  {$EXTERNALSYM KSALLOCATOR_FLAG_NO_FRAME_INTEGRITY}
  KSALLOCATOR_FLAG_MULTIPLE_OUTPUT           = $00000200;
  {$EXTERNALSYM KSALLOCATOR_FLAG_MULTIPLE_OUTPUT}
  KSALLOCATOR_FLAG_CYCLE                     = $00000400;
  {$EXTERNALSYM KSALLOCATOR_FLAG_CYCLE}
  KSALLOCATOR_FLAG_ALLOCATOR_EXISTS          = $00000800;
  {$EXTERNALSYM KSALLOCATOR_FLAG_ALLOCATOR_EXISTS}
  // there is no framing dependency between neighbouring pipes.
  KSALLOCATOR_FLAG_INDEPENDENT_RANGES        = $00001000;
  {$EXTERNALSYM KSALLOCATOR_FLAG_INDEPENDENT_RANGES}
  KSALLOCATOR_FLAG_ATTENTION_STEPPING        = $00002000;
  {$EXTERNALSYM KSALLOCATOR_FLAG_ATTENTION_STEPPING}


  KSALLOCATOR_FLAG_ENABLE_CACHED_MDL         = $00004000;
  {$EXTERNALSYM KSALLOCATOR_FLAG_ENABLE_CACHED_MDL}
  KSALLOCATOR_FLAG_2D_BUFFER_REQUIRED        = $00008000;
  {$EXTERNALSYM KSALLOCATOR_FLAG_2D_BUFFER_REQUIRED}


  //
  // old Framing structure
  //
type

  PKSALLOCATOR_FRAMING = ^KSALLOCATOR_FRAMING;
  KSALLOCATOR_FRAMING = record
  case integer of
  0: (OptionsFlags : ULONG);       // allocator options (create)
  1: (RequirementsFlags : ULONG;   // allocation requirements (query)
      PoolType      : ULONG;
      Frames        : ULONG;       // total number of allowable outstanding frames
      FrameSize     : ULONG;       // total size of frame
      FileAlignment : ULONG;
      FramePitch    : LONG;        // When KSALLOCATOR_FLAG_2D_BUFFER_REQUIRED is set this field specifies the required 2d pitch for the buffer i.e. the width + stride
      Reserved      : ULONG);
  end;
  {$EXTERNALSYM KSALLOCATOR_FRAMING}


  //
  // new Framing structure, eventually will replace KSALLOCATOR_FRAMING.
  //
  PKS_FRAMING_RANGE = ^KS_FRAMING_RANGE;
  KS_FRAMING_RANGE = record
    MinFrameSize : ULONG;
    MaxFrameSize : ULONG;
    Stepping     : ULONG;
  end;
  {$EXTERNALSYM KS_FRAMING_RANGE}

  PKS_FRAMING_RANGE_WEIGHTED = ^KS_FRAMING_RANGE_WEIGHTED;
  KS_FRAMING_RANGE_WEIGHTED = record
    Range            : KS_FRAMING_RANGE;
    InPlaceWeight    : ULONG;
    NotInPlaceWeight : ULONG;
  end;
  {$EXTERNALSYM KS_FRAMING_RANGE_WEIGHTED}

  PKS_COMPRESSION = ^KS_COMPRESSION;
  KS_COMPRESSION = record
    RatioNumerator      : ULONG;      // compression/expansion ratio
    RatioDenominator    : ULONG;
    RatioConstantMargin : ULONG;
  end;
  {$EXTERNALSYM KS_COMPRESSION}

  //
  // Memory Types and Buses are repeated in each entry.
  // Easiest to use but takes a little more memory than the varsize layout Pin\Memories\Buses\Ranges.
  //
  PKS_FRAMING_ITEM = ^KS_FRAMING_ITEM;
  KS_FRAMING_ITEM = record
  case integer of
    0: (MemoryType       : TGUID;
        BusType          : TGUID;
        MemoryFlags      : ULONG;
        BusFlags         : ULONG;
        Flags            : ULONG;
        Frames           : ULONG; // total number of allowable outstanding frames
        MemoryTypeWeight : ULONG; // this memory type Weight pin-wide
        PhysicalRange    : KS_FRAMING_RANGE;
        FramingRange     : KS_FRAMING_RANGE_WEIGHTED);
    1: (FileAlignment    : ULONG;
        FramePitch       : LONG);  // When KSALLOCATOR_FLAG_2D_BUFFER_REQUIRED is set this field specifies the required 2d pitch for the buffer i.e. the width + stride
  end;
  {$EXTERNALSYM KS_FRAMING_ITEM}

  PKSALLOCATOR_FRAMING_EX = ^KSALLOCATOR_FRAMING_EX;
  KSALLOCATOR_FRAMING_EX = record
    CountItems        : ULONG;         // count of FramingItem-s below.
    PinFlags          : ULONG;
    OutputCompression : KS_COMPRESSION;
    PinWeight         : ULONG;          // this pin framing's Weight graph-wide
    FramingItem       : array [0..High(Integer) div SizeOf(KS_FRAMING_ITEM) - 1] of KS_FRAMING_ITEM;
  end;
  {$EXTERNALSYM KSALLOCATOR_FRAMING_EX}

  //
  // define memory type GUIDs
  //
const

  KSMEMORY_TYPE_WILDCARD        : TGUID = '{00000000-0000-0000-0000-000000000000}';
  {$EXTERNALSYM KSMEMORY_TYPE_WILDCARD}
  KSMEMORY_TYPE_DONT_CARE       : TGUID = '{00000000-0000-0000-0000-000000000000}';
  {$EXTERNALSYM KSMEMORY_TYPE_DONT_CARE}
  KS_TYPE_DONT_CARE             : TGUID = '{00000000-0000-0000-0000-000000000000}';
  {$EXTERNALSYM KS_TYPE_DONT_CARE}

  KSMEMORY_TYPE_SYSTEM          : TGUID = '{091bb638-603f-11d1-b067-00a0c9062802}';
  {$EXTERNALSYM KSMEMORY_TYPE_SYSTEM}
  KSMEMORY_TYPE_USER            : TGUID = '{8cb0fc28-7893-11d1-b069-00a0c9062802}';
  {$EXTERNALSYM KSMEMORY_TYPE_USER}
  KSMEMORY_TYPE_KERNEL_PAGED    : TGUID = '{d833f8f8-7894-11d1-b069-00a0c9062802}';
  {$EXTERNALSYM KSMEMORY_TYPE_KERNEL_PAGED}
  KSMEMORY_TYPE_KERNEL_NONPAGED : TGUID = '{4a6d5fc4-7895-11d1-b069-00a0c9062802}';
  {$EXTERNALSYM KSMEMORY_TYPE_KERNEL_NONPAGED}

  // old KS clients did not specify the device memory type
  KSMEMORY_TYPE_DEVICE_UNKNOWN  : TGUID = '{091bb639-603f-11d1-b067-00a0c9062802}';
  {$EXTERNALSYM KSMEMORY_TYPE_DEVICE_UNKNOWN}


  //
  // Put Helper framing macros here.
  //

  // KSEVENTSETID_StreamAllocator: {75D95571-073C-11d0-A161-0020AFD156E4}
  KSEVENTSETID_StreamAllocator : TGUID = '{75d95571-073c-11d0-a161-0020afd156e4}';
  {$EXTERNALSYM KSEVENTSETID_StreamAllocator}


type

  PKSEVENT_STREAMALLOCATOR = ^KSEVENT_STREAMALLOCATOR;
  KSEVENT_STREAMALLOCATOR = (
    KSEVENT_STREAMALLOCATOR_INTERNAL_FREEFRAME,
    KSEVENT_STREAMALLOCATOR_FREEFRAME);
  {$EXTERNALSYM KSEVENT_STREAMALLOCATOR}

const

  KSMETHODSETID_StreamAllocator : TGUID = '{cf6e4341-ec87-11cf-a130-0020afd156e4}';
  {$EXTERNALSYM KSMETHODSETID_StreamAllocator}


type

  PKSMETHOD_STREAMALLOCATOR = ^KSMETHOD_STREAMALLOCATOR;
  KSMETHOD_STREAMALLOCATOR = (
    KSMETHOD_STREAMALLOCATOR_ALLOC,
    KSMETHOD_STREAMALLOCATOR_FREE);
  {$EXTERNALSYM KSMETHOD_STREAMALLOCATOR}


const

  KSPROPSETID_StreamAllocator : TGUID = '{cf6e4342-ec87-11cf-a130-0020afd156e4}';
  {$EXTERNALSYM KSPROPSETID_StreamAllocator}


type

  PKSSTREAMALLOCATOR_STATUS = ^KSSTREAMALLOCATOR_STATUS;
  KSSTREAMALLOCATOR_STATUS = record
    Framing         : KSALLOCATOR_FRAMING;
    AllocatedFrames : ULONG;
    Reserved        : ULONG;
  end;
  {$EXTERNALSYM KSSTREAMALLOCATOR_STATUS}

  PKSSTREAMALLOCATOR_STATUS_EX = ^KSSTREAMALLOCATOR_STATUS_EX;
  KSSTREAMALLOCATOR_STATUS_EX = record
    Framing         : KSALLOCATOR_FRAMING_EX;
    AllocatedFrames : ULONG;
    Reserved        : ULONG;
  end;
  {$EXTERNALSYM KSSTREAMALLOCATOR_STATUS_EX}


const

  KSSTREAM_HEADER_OPTIONSF_SPLICEPOINT        = $00000001;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_SPLICEPOINT}
  KSSTREAM_HEADER_OPTIONSF_PREROLL            = $00000002;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_PREROLL}
  KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY  = $00000004;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY}
  KSSTREAM_HEADER_OPTIONSF_TYPECHANGED        = $00000008;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_TYPECHANGED}
  KSSTREAM_HEADER_OPTIONSF_TIMEVALID          = $00000010;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_TIMEVALID}
  KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY  = $00000040;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY}
  KSSTREAM_HEADER_OPTIONSF_FLUSHONPAUSE       = $00000080;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_FLUSHONPAUSE}
  KSSTREAM_HEADER_OPTIONSF_DURATIONVALID      = $00000100;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_DURATIONVALID}
  KSSTREAM_HEADER_OPTIONSF_ENDOFSTREAM        = $00000200;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_ENDOFSTREAM}
  KSSTREAM_HEADER_OPTIONSF_BUFFEREDTRANSFER   = $00000400;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_BUFFEREDTRANSFER}
  KSSTREAM_HEADER_OPTIONSF_VRAM_DATA_TRANSFER = $00000800;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_VRAM_DATA_TRANSFER}
  KSSTREAM_HEADER_OPTIONSF_METADATA           = $00001000;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_METADATA}
  KSSTREAM_HEADER_OPTIONSF_ENDOFPHOTOSEQUENCE = $00002000;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_ENDOFPHOTOSEQUENCE}
  KSSTREAM_HEADER_OPTIONSF_FRAMEINFO          = $00004000;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_FRAMEINFO}
  //
  // Start of MDL caching related definitions
  //
  KSSTREAM_HEADER_OPTIONSF_PERSIST_SAMPLE     = $00008000;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_PERSIST_SAMPLE}
  KSSTREAM_HEADER_OPTIONSF_SAMPLE_PERSISTED   = $00010000;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_SAMPLE_PERSISTED}
  //
  // This flag tells the user mode to look at frame completion numbers
  //
  KSSTREAM_HEADER_TRACK_COMPLETION_NUMBERS    = $00020000;
  {$EXTERNALSYM KSSTREAM_HEADER_TRACK_COMPLETION_NUMBERS}
  //
  // End of MDL caching related definitions
  KSSTREAM_HEADER_OPTIONSF_LOOPEDDATA         = $80000000;
  {$EXTERNALSYM KSSTREAM_HEADER_OPTIONSF_LOOPEDDATA}


type

  PKSTIME = ^KSTIME;
  KSTIME = record
    Time        : LONGLONG;
    Numerator   : ULONG;
    Denominator : ULONG;
  end;
  {$EXTERNALSYM KSTIME}

  PKSSTREAM_HEADER = ^KSSTREAM_HEADER;
  KSSTREAM_HEADER = record
    Size: ULONG;
    TypeSpecificFlags: ULONG;
    PresentationTime: KSTIME;
    Duration: LONGLONG;
    FrameExtent: ULONG;
    DataUsed: ULONG;
    Data: PVoid;
    OptionsFlags: ULONG;
    Reserved: ULONG;
  end;
  {$EXTERNALSYM KSSTREAM_HEADER}


//typedef struct
//{
//	ULONG       PresentationTimeStamp;
//	ULONG       SourceClockReference;
//	union
//	{
//		struct
//		{
//			USHORT	Counter : 11;
//			USHORT  Reserved : 5;
//		};
//		USHORT	SCRToken;
//	};
//	USHORT      Reserved0;
//	ULONG       Reserved1;
//} KSSTREAM_UVC_METADATATYPE_TIMESTAMP, *PKSSTREAM_UVC_METADATATYPE_TIMESTAMP;



  PKSSTREAM_UVC_METADATATYPE_TIMESTAMP = ^KSSTREAM_UVC_METADATATYPE_TIMESTAMP;
  KSSTREAM_UVC_METADATATYPE_TIMESTAMP = record
  private
    function ReadBits(const aIndex: Integer): USHORT;
    procedure WriteBits(const aIndex: Integer;
                        const aValue: USHORT);

  public
    SCRToken: USHORT; // Same as 'flags' used to acces all bitvalues
    PresentationTimeStamp: ULONG;
	  SourceClockReference: ULONG;
    Reserved0: USHORT;
  	Reserved1: ULONG;

    property Counter: USHORT index $0011 read ReadBits write WriteBits;  // 11 bits at offset 0
    property Reserved: USHORT index $0A05 read ReadBits write WriteBits; // 5 bits at offset 11
  end;
  {$EXTERNALSYM KSSTREAM_UVC_METADATATYPE_TIMESTAMP}


  PKSSTREAM_UVC_METADATA = ^KSSTREAM_UVC_METADATA;
  KSSTREAM_UVC_METADATA = record
    StartOfFrameTimestamp: KSSTREAM_UVC_METADATATYPE_TIMESTAMP;
    EndOfFrameTimestamp: KSSTREAM_UVC_METADATATYPE_TIMESTAMP;
  end;
  {$EXTERNALSYM KSSTREAM_UVC_METADATA}


const
  //
  // Additional space for UVC Attribute data to be stamped in the payload by the

  // Inbox UVC driver

  //

  KSSTREAM_UVC_SECURE_ATTRIBUTE_SIZE = $2000;
  {$EXTERNALSYM KSSTREAM_UVC_SECURE_ATTRIBUTE_SIZE}

type

  PKSPIN_MDL_CACHING_EVENT = ^KSPIN_MDL_CACHING_EVENT;
  KSPIN_MDL_CACHING_EVENT = (
    KSPIN_MDL_CACHING_NOTIFY_CLEANUP,
    KSPIN_MDL_CACHING_NOTIFY_CLEANALL_WAIT,
    KSPIN_MDL_CACHING_NOTIFY_CLEANALL_NOWAIT,
    KSPIN_MDL_CACHING_NOTIFY_ADDSAMPLE);
  {$EXTERNALSYM KSPIN_MDL_CACHING_EVENT}


  PKSPIN_MDL_CACHING_NOTIFICATION = ^KSPIN_MDL_CACHING_NOTIFICATION;
  KSPIN_MDL_CACHING_NOTIFICATION = record
    Event: KSPIN_MDL_CACHING_EVENT;
    Buffer: Pointer;
  end;
  {$EXTERNALSYM KSPIN_MDL_CACHING_NOTIFICATION}


  PKSPIN_MDL_CACHING_NOTIFICATION32 = ^KSPIN_MDL_CACHING_NOTIFICATION32;
  KSPIN_MDL_CACHING_NOTIFICATION32 = record
    Event: KSPIN_MDL_CACHING_EVENT;
    Buffer: ULONG;
  end;
  {$EXTERNALSYM KSPIN_MDL_CACHING_NOTIFICATION32}


const

  KSPROPSETID_StreamInterface :	TGUID = (D1: $1fdd8ee1;
  {$EXTERNALSYM KSPROPSETID_StreamInterface}
                                         D2: $9cd3;
                                         D3: $11d0;
                                         D4: ($82, $aa, $00, $00, $f8, $22, $fe, $8a));

type

  KSPROPERTY_STREAMINTERFACE = (KSPROPERTY_STREAMINTERFACE_HEADERSIZE);
  PKSPROPERTY_STREAMINTERFACE = ^KSPROPERTY_STREAMINTERFACE;
  {$EXTERNALSYM PKSPROPERTY_STREAMINTERFACE}

const

  KSPROPSETID_Stream :	TGUID = '{65aaba60-98ae-11cf-a10d-0020afd156e4}';
  {$EXTERNALSYM KSPROPSETID_Stream}


type

  PKSPROPERTY_STREAM = ^KSPROPERTY_STREAM;
  KSPROPERTY_STREAM = (
    KSPROPERTY_STREAM_ALLOCATOR,
    KSPROPERTY_STREAM_QUALITY,
    KSPROPERTY_STREAM_DEGRADATION,
    KSPROPERTY_STREAM_MASTERCLOCK,
    KSPROPERTY_STREAM_TIMEFORMAT,
    KSPROPERTY_STREAM_PRESENTATIONTIME,
    KSPROPERTY_STREAM_PRESENTATIONEXTENT,
    KSPROPERTY_STREAM_FRAMETIME,
    KSPROPERTY_STREAM_RATECAPABILITY,
    KSPROPERTY_STREAM_RATE,
    KSPROPERTY_STREAM_PIPE_ID);
  {$EXTERNALSYM KSPROPERTY_STREAM}


const

  KSPROPSETID_PinMDLCacheClearProp :	TGUID = '{BD718A7B-97FC-40C7-88CE-D3FF06F55B16}';
  {$EXTERNALSYM KSPROPSETID_PinMDLCacheClearProp}


type

  PKSQUALITY_MANAGER = ^KSQUALITY_MANAGER;
  KSQUALITY_MANAGER = record
    QualityManager : THandle;
    Context        : Pointer;
  end;
  {$EXTERNALSYM KSQUALITY_MANAGER}


  PKSFRAMETIME = ^KSFRAMETIME;
  KSFRAMETIME = record
    Duration   : int64;
    FrameFlags : ULONG;
    Reserved   : ULONG;
  end;
  {$EXTERNALSYM KSFRAMETIME}


const

  KSFRAMETIME_VARIABLESIZE = $00000001;
  {$EXTERNALSYM KSFRAMETIME_VARIABLESIZE}


type

  PKSRATE = ^KSRATE;
  KSRATE = record
    PresentationStart : LONGLONG;
    Duration          : LONGLONG;
    Interface_        : KSPIN_INTERFACE;
    Rate              : LONG;
    Flags             : ULONG;
  end;
  {$EXTERNALSYM KSRATE}


const

  KSRATE_NOPRESENTATIONSTART    = $00000001;
  {$EXTERNALSYM KSRATE_NOPRESENTATIONSTART}
  KSRATE_NOPRESENTATIONDURATION = $00000002;
  {$EXTERNALSYM KSRATE_NOPRESENTATIONDURATION}


type

  PKSRATE_CAPABILITY = ^KSRATE_CAPABILITY;
  KSRATE_CAPABILITY = record
    Property_ : KSPROPERTY;
    Rate      : KSRATE;
  end;
  {$EXTERNALSYM KSRATE_CAPABILITY}


const

  KSPROPSETID_Clock :	TGUID = '{DF12A4C0-AC17-11CF-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSPROPSETID_Clock}


//
// Performs a x*y/z operation on 64 bit quantities by splitting the operation.
// The equation is simplified with respect to adding in the remainder for the
// upper 32 bits.
//
// (xh * 10000000 / Frequency) * 2^32 + ((((xh * 10000000) % Frequency) * 2^32 + (xl * 10000000)) / Frequency)
//

  NANOSECONDS = 10000000;
  {$EXTERNALSYM NANOSECONDS}

  function KSCONVERT_PERFORMANCE_TIME(Frequency: ULONG;
                                      _PerformanceTime: ULARGE_INTEGER): ULONGLONG;
  {$EXTERNALSYM KSCONVERT_PERFORMANCE_TIME}



type

  PKSCLOCK_CREATE = ^KSCLOCK_CREATE;
  KSCLOCK_CREATE = record
    CreateFlags : ULONG;
  end;
  {$EXTERNALSYM KSCLOCK_CREATE}

  PKSCORRELATED_TIME = ^KSCORRELATED_TIME;
  KSCORRELATED_TIME = record
    Time       : LONGLONG;
    SystemTime : LONGLONG;
  end;
  {$EXTERNALSYM KSCORRELATED_TIME}

  PKSRESOLUTION = ^KSRESOLUTION;
  KSRESOLUTION = record
    Granularity : LONGLONG;
    Error       : LONGLONG;
  end;
  {$EXTERNALSYM KSRESOLUTION}

  PKSPROPERTY_CLOCK = ^KSPROPERTY_CLOCK;
  KSPROPERTY_CLOCK = (
    KSPROPERTY_CLOCK_TIME,
    KSPROPERTY_CLOCK_PHYSICALTIME,
    KSPROPERTY_CLOCK_CORRELATEDTIME,
    KSPROPERTY_CLOCK_CORRELATEDPHYSICALTIME,
    KSPROPERTY_CLOCK_RESOLUTION,
    KSPROPERTY_CLOCK_STATE,
    KSPROPERTY_CLOCK_FUNCTIONTABLE);
  {$EXTERNALSYM KSPROPERTY_CLOCK}


const

  KSEVENTSETID_Clock : TGUID = '{364D8E20-62C7-11CF-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSEVENTSETID_Clock}


type

  PKSEVENT_CLOCK_POSITION = ^KSEVENT_CLOCK_POSITION;
  KSEVENT_CLOCK_POSITION = (
    KSEVENT_CLOCK_INTERVAL_MARK,
    KSEVENT_CLOCK_POSITION_MARK);
  {$EXTERNALSYM KSEVENT_CLOCK_POSITION}

const

  KSEVENTSETID_Connection : TGUID = '{7f4bcbe0-9ea5-11cf-a5d6-28db04c10000}';
  {$EXTERNALSYM KSEVENTSETID_Connection}


type

  PKSEVENT_CONNECTION = ^KSEVENT_CONNECTION;
  KSEVENT_CONNECTION = (
    KSEVENT_CONNECTION_POSITIONUPDATE,
    KSEVENT_CONNECTION_DATADISCONTINUITY,
    KSEVENT_CONNECTION_TIMEDISCONTINUITY,
    KSEVENT_CONNECTION_PRIORITY,
    KSEVENT_CONNECTION_ENDOFSTREAM);
  {$EXTERNALSYM KSEVENT_CONNECTION}

  PKSQUALITY = ^KSQUALITY;
  KSQUALITY = record
    Context    : Pointer;
    Proportion : ULONG;
    DeltaTime  : int64;
  end;
  {$EXTERNALSYM KSQUALITY}

  PKSERROR = ^KSERROR;
  KSERROR = record
    Context : Pointer;
    Status  : ULONG;
  end;
  {$EXTERNALSYM KSERROR}

  PKSDEGRADE = ^KSDEGRADE;
  KSDEGRADE = KSIDENTIFIER;
  {$EXTERNALSYM KSDEGRADE}

const

  KSDEGRADESETID_Standard : TGUID = '{9F564180-704C-11D0-A5D6-28DB04C10000}';
  {$EXTERNALSYM KSDEGRADESETID_Standard}


type
  PKSDEGRADE_STANDARD = ^KSDEGRADE_STANDARD;
  KSDEGRADE_STANDARD = (
    KSDEGRADE_STANDARD_SAMPLE,
    KSDEGRADE_STANDARD_QUALITY,
    KSDEGRADE_STANDARD_COMPUTATION,
    KSDEGRADE_STANDARD_SKIP);
  {$EXTERNALSYM KSDEGRADE_STANDARD}

  PKSPROPERTY_SERIALHDR = ^KSPROPERTY_SERIALHDR;
  KSPROPERTY_SERIALHDR = record
    PropertySet : TGUID;
    Count       : ULONG;
  end;
  {$EXTERNALSYM KSPROPERTY_SERIALHDR}

  PKSPROPERTY_SERIAL = ^KSPROPERTY_SERIAL;
  KSPROPERTY_SERIAL = record
    PropTypeSet    : KSIDENTIFIER;
    Id             : ULONG;
    PropertyLength : ULONG;
  end;
  {$EXTERNALSYM KSPROPERTY_SERIAL}



// 3070
//#if (NTDDI_VERSION >= NTDDI_WINXP)
//
// Skipped
//
//#endif // (NTDDI_VERSION >= NTDDI_WINXP)
// 3983
//===========================================================================

//
// exported prototypes
//

//#if (NTDDI_VERSION >= NTDDI_WINXP)
//
//Skipped
//
//#endif // (NTDDI_VERSION >= NTDDI_WINXP)
// 6342





  function KsCreateAllocator(ConnectionHandle: THandle;
                             AllocatorFraming: KSALLOCATOR_FRAMING;
                             out AllocatorHandle: PHANDLE): DWORD; stdcall;
  {$EXTERNALSYM KsCreateAllocator}

  function KsCreateClock(ConnectionHandle: THandle;
                         ClockCreate: KSCLOCK_CREATE;
                         out ClockHandle: PHANDLE): DWORD; stdcall;
  {$EXTERNALSYM KsCreateClock}

  function KsCreatePin(FilterHandle: THandle;
                       Connect: KSPIN_CONNECT;
                       DesiredAccess: ACCESS_MASK ;
                       out ConnectionHandle: THandle): DWORD; stdcall;
  {$EXTERNALSYM KsCreatePin}

  function KsCreateTopologyNode(ParentHandle: THandle;
                                NodeCreate: KSNODE_CREATE;
                                DesiredAccess: ACCESS_MASK;
                                out NodeHandle: THandle): DWORD; stdcall;
  {$EXTERNALSYM KsCreateTopologyNode}

  //
  // KS create function that needs to be called after initializing COM
  //

  function KsCreateAllocator2(ConnectionHandle: THandle;
                              AllocatorFraming: KSALLOCATOR_FRAMING;
                              out AllocatorHandle: THandle): HResult; stdcall;
  {$EXTERNALSYM KsCreateAllocator2}

  function KsCreateClock2(ConnectionHandle: THandle;
                          ClockCreate: KSCLOCK_CREATE;
                          out ClockHandle: THandle): HResult; stdcall;
  {$EXTERNALSYM KsCreateClock2}

  function KsCreatePin2(FilterHandle: THandle;
                        Connect: KSPIN_CONNECT;
                        DesiredAccess: ACCESS_MASK;
                        out ConnectionHandle: THandle): HResult; stdcall;
  {$EXTERNALSYM KsCreatePin2}

  function KsCreateTopologyNode2(ParentHandle: THandle;
                                 NodeCreate: KSNODE_CREATE;
                                 DesiredAccess: ACCESS_MASK;
                                 NodeHandle: THandle): HResult; stdcall;
  {$EXTERNALSYM KsCreateTopologyNode2}

  //
  //Start of MDL caching related decisions
  //

  //
  //MDL sharing related definitions
  //

type

  _combined = record
    pHandle: ULONG;     // The Handle which represents the user mode Pin Handle
    fHandle: ULONG;
    uPayload: ULONG64;  // The PayLoad from Sample, which is the Buffer attached
  end;
  {$EXTERNALSYM _combined}

  PMF_MDL_SHARED_PAYLOAD_KEY = ^MF_MDL_SHARED_PAYLOAD_KEY;
  _MF_MDL_SHARED_PAYLOAD_KEY = record
    case integer of
      0: (combined: _combined);
      1: (GMDLHandle: TGUID);
  end;
  {$EXTERNALSYM _MF_MDL_SHARED_PAYLOAD_KEY}
  MF_MDL_SHARED_PAYLOAD_KEY = _MF_MDL_SHARED_PAYLOAD_KEY;
  {$EXTERNALSYM MF_MDL_SHARED_PAYLOAD_KEY}


  //
  // We need the handle and upayload to be ULONG64
  // to adjust for 64 bit systems and 32 bit systems
  //
  procedure MF_SET_SHARED_MDLHANDLE(a: ULONG;
                                    b: ULONG;
                                    c: ULONG;
                                    d: MF_MDL_SHARED_PAYLOAD_KEY);

  // Additional Prototypes for ALL interfaces

  // end of Additional Prototypes

implementation

const
  ksLib  = 'Ksuser.dll';

{$WARN SYMBOL_PLATFORM OFF}
function KsCreateAllocator;     external ksLib name 'KsCreateAllocator' {$IF COMPILERVERSION > 20.0} delayed {$ENDIF};
function KsCreateClock;         external ksLib name 'KsCreateClock' {$IF COMPILERVERSION > 20.0} delayed {$ENDIF};
function KsCreatePin;           external ksLib name 'KsCreatePin' {$IF COMPILERVERSION > 20.0} delayed {$ENDIF};
function KsCreateTopologyNode;  external ksLib name 'KsCreateTopologyNode' {$IF COMPILERVERSION > 20.0} delayed {$ENDIF};
function KsCreateAllocator2;    external ksLib name 'KsCreateAllocator' {$IF COMPILERVERSION > 20.0} delayed {$ENDIF};
function KsCreateClock2;        external ksLib name 'KsCreateClock' {$IF COMPILERVERSION > 20.0} delayed {$ENDIF};
function KsCreatePin2;          external ksLib name 'KsCreatePin' {$IF COMPILERVERSION > 20.0} delayed {$ENDIF};
function KsCreateTopologyNode2; external ksLib name 'KsCreateTopologyNode' {$IF COMPILERVERSION > 20.0} delayed {$ENDIF};
{$WARN SYMBOL_PLATFORM ON}


///////// KSSTREAM_UVC_METADATATYPE_TIMESTAMP //////////////////////////////////

{$OPTIMIZATION ON}
{$OVERFLOWCHECKS OFF}

  function KSSTREAM_UVC_METADATATYPE_TIMESTAMP.ReadBits(const aIndex: Integer): USHORT;
  var
    Offset: USHORT;
    NrBits: USHORT;
    Mask: USHORT;

  begin
    NrBits:= aIndex and $FF;
    Offset:= aIndex shr 8;
    Mask:= ((1 shl NrBits) - 1);
    Result:= (SCRToken shr Offset) and Mask;
  end;

  procedure KSSTREAM_UVC_METADATATYPE_TIMESTAMP.WriteBits(const aIndex: Integer;
                                                          const aValue: USHORT);
  var
    Offset: Integer;
    NrBits: Integer;
    Mask: Integer;

  begin
    NrBits:= aIndex and $FF;
    Offset:= aIndex shr 8;
    Mask:= ((1 shl NrBits) - 1);
    Assert(aValue <= Mask);
    SCRToken:= (SCRToken and (not (UINT(Mask) shl UINT(Offset))))
                or (UINT(aValue) shl UINT(Offset));
  end;
// END KSSTREAM_UVC_METADATATYPE_TIMESTAMP /////////////////////////////////////

function KSCONVERT_PERFORMANCE_TIME(Frequency: ULONG;
                                    _PerformanceTime: ULARGE_INTEGER): ULONGLONG;
begin
  Result := (((_PerformanceTime.HighPart * NANOSECONDS) div (Frequency shl 32)) +
            ((_PerformanceTime.HighPart * NANOSECONDS) mod (Frequency shl 32)) +
            ((_PerformanceTime.LowPart * NANOSECONDS) div Frequency));
end;


procedure MF_SET_SHARED_MDLHANDLE(a: ULONG;
                                  b: ULONG;
                                  c: ULONG;
                                  d: MF_MDL_SHARED_PAYLOAD_KEY);
begin
  d.combined.phandle:= ULONG32(a);
  d.combined.fhandle:= ULONG32(b);
  d.combined.upayload:= ULONG64(c);
end;

  // Implement Additional Prototypes here.

end.
